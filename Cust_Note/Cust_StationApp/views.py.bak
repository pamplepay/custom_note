from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.contrib import messages
from django.db.models import Q
from Cust_User.models import CustomUser, CustomerProfile, CustomerStationRelation
from .models import PointCard, StationCardMapping, PointHistory
from datetime import datetime, timedelta
import json
import logging
import re
from django.utils import timezone
from django.contrib.auth.hashers import make_password
from django.db import transaction
from django.db.transaction import TransactionManagementError
from django.views.decorators.http import require_http_methods

logger = logging.getLogger(__name__)

@login_required
def station_main(request):
    """주유소 메인 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    # 카드 통계
    total_cards = StationCardMapping.objects.filter(station=request.user).count()
    active_cards = StationCardMapping.objects.filter(station=request.user, is_active=True).count()
    inactive_cards = StationCardMapping.objects.filter(station=request.user, is_active=False).count()
    
    context = {
        'total_cards': total_cards,
        'active_cards': active_cards,
        'inactive_cards': inactive_cards,
    }
    return render(request, 'Cust_Station/station_main.html', context)

@login_required
def station_management(request):
    """주유소 관리 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    # 현재 주유소의 카드 매핑 수 조회
    mappings = StationCardMapping.objects.filter(station=request.user)
    total_cards = mappings.count()
    active_cards = mappings.filter(is_active=True, card__is_used=False).count()
    inactive_cards = mappings.filter(is_active=True, card__is_used=True).count()
    
    # 비율 계산
    active_percentage = (active_cards / total_cards * 100) if total_cards > 0 else 0
    inactive_percentage = (inactive_cards / total_cards * 100) if total_cards > 0 else 0
    
    context = {
        'total_cards': total_cards,
        'active_cards': active_cards,
        'inactive_cards': inactive_cards,
        'active_percentage': active_percentage,
        'inactive_percentage': inactive_percentage,
    }
    
    return render(request, 'Cust_Station/station_management.html', context)

@login_required
def station_profile(request):
    """주유소 프로필 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    # 현재 주유소 프로필 가져오기 또는 생성
    try:
        station_profile = request.user.station_profile
    except:
        from Cust_User.models import StationProfile
        station_profile = StationProfile(user=request.user)
        station_profile.save()
    
    if request.method == 'POST':
        # POST 요청 처리
        station_profile.station_name = request.POST.get('station_name')
        station_profile.phone = request.POST.get('phone')
        station_profile.address = request.POST.get('address')
        station_profile.business_number = request.POST.get('business_number')
        station_profile.oil_company_code = request.POST.get('oil_company_code')
        station_profile.agency_code = request.POST.get('agency_code')
        station_profile.station_code = request.POST.get('station_code')
        
        try:
            station_profile.save()
            messages.success(request, '주유소 정보가 성공적으로 업데이트되었습니다.')
            return redirect('station:profile')
        except Exception as e:
            messages.error(request, f'정보 업데이트 중 오류가 발생했습니다: {str(e)}')
    
    # GET 요청 처리
    context = {
        'station_name': station_profile.station_name,
        'phone': station_profile.phone,
        'address': station_profile.address,
        'business_number': station_profile.business_number,
        'oil_company_code': station_profile.oil_company_code,
        'agency_code': station_profile.agency_code,
        'station_code': station_profile.station_code,
    }
    
    return render(request, 'Cust_Station/station_profile.html', context)

@login_required
def station_cardmanage(request):
    """주유소 카드 관리 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    # 현재 주유소의 카드 매핑 수 조회
    mappings = StationCardMapping.objects.filter(station=request.user)
    total_cards = mappings.filter(is_active=True).count()
    
    # 카드 상태별 통계
    active_cards = mappings.filter(is_active=True, card__is_used=False).count()
    used_cards = mappings.filter(is_active=True, card__is_used=True).count()
    
    # 비율 계산
    active_percentage = (active_cards / total_cards * 100) if total_cards > 0 else 0
    used_percentage = (used_cards / total_cards * 100) if total_cards > 0 else 0
    
    # 최근 등록된 카드 3장 가져오기
    recent_cards = StationCardMapping.objects.select_related('card').filter(
        station=request.user,
        is_active=True
    ).order_by('-registered_at')[:3]
    
    cards_data = []
    for mapping in recent_cards:
        card = mapping.card
        cards_data.append({
            'number': card.number,
            'is_used': card.is_used,
            'created_at': mapping.registered_at.strftime('%Y-%m-%d %H:%M:%S')
        })
    
    context = {
        'total_cards': total_cards,
        'active_cards': active_cards,
        'used_cards': used_cards,
        'active_percentage': active_percentage,
        'used_percentage': used_percentage,
        'station_name': request.user.username,
        'recent_cards': cards_data
    }
    
    return render(request, 'Cust_Station/station_cardmanage.html', context)

@login_required
def station_usermanage(request):
    """주유소 고객 관리 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    # 페이지네이션 설정
    page = int(request.GET.get('page', 1))
    items_per_page = 10
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    
    # 검색어 처리
    search_query = request.GET.get('search', '').strip()
    
    # 현재 주유소와 관계가 있는 고객들 조회
    relations = CustomerStationRelation.objects.filter(station=request.user)
    if search_query:
        relations = relations.filter(
            Q(customer__username__icontains=search_query) |
            Q(customer__customer_profile__customer_phone__icontains=search_query) |
            Q(customer__customer_profile__membership_card__icontains=search_query)
        )
    
    # 전체 고객 수와 페이지 수 계산
    total_customers = relations.count()
    total_pages = (total_customers + items_per_page - 1) // items_per_page
    
    # 페이지 범위 계산
    page_range = range(max(1, page - 2), min(total_pages + 1, page + 3))
    
    # 현재 페이지의 고객 목록 가져오기
    current_relations = relations.select_related(
        'customer',
        'customer__customer_profile'
    )[start_idx:end_idx]
    
    # 고객 데이터 구성
    customers_data = []
    for relation in current_relations:
        customer = relation.customer
        try:
            profile = customer.customer_profile
            phone_number = profile.customer_phone if profile else ''
            card_number = profile.membership_card if profile and profile.membership_card else '-'
            
            customers_data.append({
                'id': customer.id,
                'username': customer.username,
                'phone': phone_number,
                'card_number': card_number,
                'last_visit': relation.created_at.strftime('%Y-%m-%d %H:%M:%S') if relation.created_at else '-',
                'visit_count': relation.visit_count if hasattr(relation, 'visit_count') else 0
            })
        except CustomerProfile.DoesNotExist:
            customers_data.append({
                'id': customer.id,
                'username': customer.username,
                'phone': '-',
                'card_number': '-',
                'last_visit': relation.created_at.strftime('%Y-%m-%d %H:%M:%S') if relation.created_at else '-',
                'visit_count': relation.visit_count if hasattr(relation, 'visit_count') else 0
            })
    
    context = {
        'customers': customers_data,
        'total_pages': total_pages,
        'current_page': page,
        'page_range': list(page_range),
        'search_query': search_query,
    }
    
    # AJAX 요청인 경우 JSON 응답
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse(context)
    
    return render(request, 'Cust_Station/station_usermanage.html', context)

@login_required
def update_customer_info(request):
    """고객 정보 업데이트"""
    if not request.user.is_station:
        return JsonResponse({'error': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            customer_id = data.get('customer_id')
            phone = data.get('phone', '').strip()
            card_number = data.get('cardNumber', '').strip()
            
            customer = get_object_or_404(CustomUser, id=customer_id, user_type='CUSTOMER')
            
            # CustomerProfile 가져오기 또는 생성
            profile, created = CustomerProfile.objects.get_or_create(user=customer)
            
            # 전화번호와 카드번호 업데이트
            if phone:
                profile.customer_phone = phone
            if card_number:
                profile.membership_card = card_number
            
            profile.save()
            
            return JsonResponse({
                'success': True,
                'message': '고객 정보가 업데이트되었습니다.',
                'phone': profile.customer_phone,
                'cardNumber': profile.membership_card
            })
            
        except json.JSONDecodeError:
            return JsonResponse({'error': '잘못된 요청 형식입니다.'}, status=400)
        except CustomUser.DoesNotExist:
            return JsonResponse({'error': '고객을 찾을 수 없습니다.'}, status=404)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': '잘못된 요청 방식입니다.'}, status=405)

@login_required
def get_cards(request):
    """등록된 카드 목록 조회"""
    if not request.user.is_station:
        logger.warning(f"권한 없는 사용자의 접근 시도: {request.user.username}")
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    try:
        # 현재 주유소에 등록된 카드 매핑 조회
        mappings = StationCardMapping.objects.select_related('card').filter(
            station=request.user,
            is_active=True
        ).order_by('-registered_at')
        
        # 전체 카드 수 계산 (캐시되지 않도록 실제 쿼리 실행)
        total_count = mappings.count()
        logger.info(f"주유소 {request.user.username}의 등록 카드 수: {total_count}")
        
        # 카드 상태별 수 계산 (캐시되지 않도록 실제 쿼리 실행)
        active_count = mappings.filter(card__is_used=False).count()
        used_count = mappings.filter(card__is_used=True).count()
        
        logger.info(f"통계 정보 - 전체: {total_count}, 사용가능: {active_count}, 사용중: {used_count}")
        
        # 카드 목록 데이터 생성
        cards_data = []
        for mapping in mappings:
            card = mapping.card
            card_info = {
                'number': card.number,
                'is_used': card.is_used,
                'created_at': mapping.registered_at.strftime('%Y-%m-%d %H:%M:%S')
            }
            cards_data.append(card_info)
            logger.debug(f"카드 정보: {card_info}")
        
        return JsonResponse({
            'status': 'success',
            'cards': cards_data,
            'total_count': total_count,
            'active_count': active_count,
            'used_count': used_count
        })
    except Exception as e:
        logger.error(f"카드 목록 조회 중 오류 발생: {str(e)}", exc_info=True)
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)

@login_required
def register_cards_single(request):
    """카드 개별 등록"""
    logger.info(f"개별 카드 등록 요청 - 사용자: {request.user.username}, 메소드: {request.method}")
    
    if not request.user.is_station:
        logger.warning(f"권한 없는 사용자의 카드 등록 시도: {request.user.username}")
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            logger.info(f"요청 본문: {request.body.decode('utf-8')}")
            data = json.loads(request.body)
            card_number = data.get('cardNumber', '').strip()
            logger.info(f"추출된 카드번호: '{card_number}'")
            
            # 입력 검증
            if not card_number or len(card_number) != 16 or not card_number.isdigit():
                logger.warning(f"잘못된 카드번호 형식: '{card_number}' (길이: {len(card_number) if card_number else 0})")
                return JsonResponse({
                    'status': 'error',
                    'message': '카드번호는 16자리 숫자여야 합니다.'
                })
            
            logger.info(f"카드 생성 시도: {card_number}")
            # get_or_create를 사용하여 중복 생성 방지
            card, created = PointCard.objects.get_or_create(number=card_number)
            logger.info(f"카드 생성 결과: created={created}, card_id={card.id}")
            
            # 카드와 주유소 매핑 생성
            logger.info(f"매핑 생성 시도: 주유소={request.user.username}, 카드={card_number}")
            mapping, mapping_created = StationCardMapping.objects.get_or_create(
                station=request.user,
                card=card,
                defaults={'is_active': True}
            )
            logger.info(f"매핑 생성 결과: created={mapping_created}, mapping_id={mapping.id}")
            
            # 이미 매핑이 존재하지만 비활성화된 경우 활성화
            if not mapping_created and not mapping.is_active:
                mapping.is_active = True
                mapping.save()
                logger.info(f"비활성화된 매핑을 활성화함: mapping_id={mapping.id}")
            
            message = '카드가 성공적으로 등록되었습니다.'
            if not created and mapping_created:
                message = '기존 카드가 주유소에 등록되었습니다.'
            elif not created and not mapping_created:
                message = '이미 등록된 카드입니다.'
            
            return JsonResponse({
                'status': 'success',
                'message': message,
                'created': created,
                'mapping_created': mapping_created
            })
            
        except json.JSONDecodeError:
            logger.error("JSON 디코딩 오류")
            return JsonResponse({
                'status': 'error',
                'message': '잘못된 요청 형식입니다.'
            }, status=400)
        except Exception as e:
            logger.error(f"카드 등록 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': f'카드 등록 중 오류가 발생했습니다: {str(e)}'
            }, status=500)
    
    return JsonResponse({'status': 'error', 'message': '잘못된 요청 방식입니다.'}, status=405)

@login_required
def register_cards_bulk(request):
    """카드 일괄 등록"""
    if not request.user.is_station:
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            start_number = data.get('startNumber', '').strip()
            card_count = int(data.get('cardCount', 0))
            
            # 입력 검증
            if not start_number or len(start_number) != 16 or not start_number.isdigit():
                return JsonResponse({
                    'status': 'error',
                    'message': '시작 번호는 16자리 숫자여야 합니다.'
                })
            
            if card_count < 1 or card_count > 1000:
                return JsonResponse({
                    'status': 'error',
                    'message': '카드 수는 1~1000 사이여야 합니다.'
                })
            
            start_num = int(start_number)
            created_cards = []
            duplicate_cards = []
            
            for i in range(card_count):
                card_number = str(start_num + i).zfill(16)
                
                try:
                    # get_or_create를 사용하여 중복 생성 방지
                    card, created = PointCard.objects.get_or_create(number=card_number)
                    
                    # 카드와 주유소 매핑 생성
                    mapping, mapping_created = StationCardMapping.objects.get_or_create(
                        station=request.user,
                        card=card,
                        defaults={'is_active': True}
                    )
                    
                    # 매핑이 이미 존재하지만 비활성화된 경우 활성화
                    if not mapping_created and not mapping.is_active:
                        mapping.is_active = True
                        mapping.save()
                    
                    if created:
                        created_cards.append(card_number)
                        logger.info(f"새 카드 등록: {card_number} (주유소: {request.user.username})")
                    else:
                        if mapping_created:
                            logger.info(f"기존 카드 매핑: {card_number} (주유소: {request.user.username})")
                        duplicate_cards.append(card_number)
                        
                except Exception as e:
                    logger.error(f"카드 등록 중 오류: {card_number}, {str(e)}")
                    duplicate_cards.append(card_number)
            
            message = f'{len(created_cards)}개의 카드가 등록되었습니다.'
            if duplicate_cards:
                message += f' (중복 {len(duplicate_cards)}개 제외)'
            
            return JsonResponse({
                'status': 'success',
                'message': message,
                'created_count': len(created_cards),
                'duplicate_count': len(duplicate_cards)
            })
            
        except json.JSONDecodeError:
            return JsonResponse({
                'status': 'error',
                'message': '잘못된 요청 형식입니다.'
            }, status=400)
        except ValueError as e:
            return JsonResponse({
                'status': 'error',
                'message': str(e)
            }, status=400)
        except Exception as e:
            logger.error(f"카드 일괄 등록 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': f'카드 일괄 등록 중 오류가 발생했습니다: {str(e)}'
            }, status=500)
    
    return JsonResponse({'status': 'error', 'message': '잘못된 요청 방식입니다.'}, status=405)

@login_required
def update_card_status(request):
    """카드 사용 상태 업데이트"""
    if not request.user.is_station:
        logger.warning(f"권한 없는 사용자의 상태 업데이트 시도: {request.user.username}")
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            card_number = data.get('cardNumber', '').strip()
            is_used = data.get('isUsed', False)
            
            # 입력 검증
            if not card_number or len(card_number) != 16 or not card_number.isdigit():
                return JsonResponse({
                    'status': 'error',
                    'message': '카드번호가 올바르지 않습니다.'
                })
            
            # 카드와 매핑 상태 업데이트
            try:
                # 카드 존재 여부 확인
                card = PointCard.objects.get(number=card_number)
                
                # 현재 주유소의 카드 매핑 확인
                mapping = StationCardMapping.objects.get(
                    station=request.user,
                    card=card,
                    is_active=True
                )
                
                # 카드 상태 업데이트
                old_status = card.is_used
                card.is_used = is_used
                card.save()
                
                # 상태 변경 로깅
                logger.info(
                    f"카드 상태 변경: {card_number}, "
                    f"주유소: {request.user.username}, "
                    f"이전 상태: {'사용중' if old_status else '미사용'}, "
                    f"변경 상태: {'사용중' if is_used else '미사용'}"
                )
                
                return JsonResponse({
                    'status': 'success',
                    'message': '카드 상태가 업데이트되었습니다.',
                    'cardNumber': card.number,
                    'isUsed': card.is_used
                })
            except PointCard.DoesNotExist:
                logger.warning(f"존재하지 않는 카드 상태 업데이트 시도: {card_number}")
                return JsonResponse({
                    'status': 'error',
                    'message': '등록되지 않은 카드번호입니다.'
                })
            except StationCardMapping.DoesNotExist:
                logger.warning(f"권한 없는 카드 상태 업데이트 시도: {card_number}, 주유소: {request.user.username}")
                return JsonResponse({
                    'status': 'error',
                    'message': '해당 카드에 대한 권한이 없습니다.'
                })
            
        except json.JSONDecodeError:
            return JsonResponse({
                'status': 'error',
                'message': '잘못된 요청 형식입니다.'
            }, status=400)
        except Exception as e:
            logger.error(f"카드 상태 업데이트 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': f'카드 상태 업데이트 중 오류가 발생했습니다: {str(e)}'
            }, status=500)
    
    return JsonResponse({'status': 'error', 'message': '잘못된 요청 방식입니다.'}, status=405)

@login_required
def delete_card(request):
    """멤버십 카드 삭제"""
    if not request.user.is_station:
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            card_id = data.get('card_id')
            
            if not card_id:
                return JsonResponse({
                    'status': 'error',
                    'message': '멤버십 카드 ID는 필수입니다.'
                }, status=400)
            
            # 카드 매핑 삭제
            mapping = get_object_or_404(
                StationCardMapping,
                point_card_id=card_id,
                station=request.user
            )
            mapping.delete()
            
            return JsonResponse({
                'status': 'success',
                'message': '멤버십 카드가 성공적으로 삭제되었습니다.'
            })
            
        except Exception as e:
            logger.error(f"멤버십 카드 삭제 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': f'멤버십 카드 삭제 중 오류가 발생했습니다: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'status': 'error',
        'message': '잘못된 요청 메소드입니다.'
    }, status=405)

@login_required
def station_couponmanage(request):
    """주유소 쿠폰 관리 페이지"""
    if not request.user.is_station:
        messages.error(request, '주유소 회원만 접근할 수 있습니다.')
        return redirect('home')
    
    context = {
        'station_name': request.user.username,
        'total_coupons': 0,
        'used_coupons': 0,
        'unused_coupons': 0
    }
    
    return render(request, 'Cust_Station/station_couponmanage.html', context)

@require_http_methods(["GET"])
@login_required
def get_unused_cards(request):
    """미사용 카드 목록 조회"""
    logger.info("\n=== 미사용 카드 목록 조회 시작 ===")
    logger.info(f"요청 사용자: {request.user.username}")
    
    if not request.user.is_station:
        logger.warning(f"권한 없는 사용자 접근: {request.user.username}")
        return JsonResponse({
            'status': 'error',
            'message': '권한이 없습니다'
        }, status=403)
    
    try:
        # 현재 주유소의 미사용 카드 조회
        unused_mappings = StationCardMapping.objects.filter(
            station=request.user,
            is_active=True,
            card__is_used=False  # 미사용 카드만 조회
        ).select_related('card')
        
        # 카드 정보 목록 생성
        cards_data = []
        for mapping in unused_mappings:
            card_info = {
                'number': mapping.card.number,
                'created_at': mapping.registered_at.strftime('%Y-%m-%d %H:%M:%S')
            }
            cards_data.append(card_info)
            logger.debug(f"카드 정보: {card_info}")
        
        logger.info(f"조회된 미사용 카드 수: {len(cards_data)}")
        logger.info("=== 미사용 카드 목록 조회 완료 ===\n")
        
        return JsonResponse({
            'status': 'success',
            'cards': cards_data
        })
        
    except Exception as e:
        logger.error(f"카드 목록 조회 중 오류 발생: {str(e)}")
        logger.error(f"오류 위치: {e.__traceback__.tb_frame.f_code.co_filename}:{e.__traceback__.tb_lineno}")
        return JsonResponse({
            'status': 'error',
            'message': f'카드 목록 조회 중 오류가 발생했습니다: {str(e)}'
        })

@login_required
def register_customer(request):
    """신규 고객 등록"""
    print("[DEBUG] register_customer 함수 시작")
    if not request.user.is_station:
        print("[DEBUG] 권한 없음: is_station=False")
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            print("[DEBUG] POST 요청 데이터 확인")
            data = json.loads(request.body)
            print(f"[DEBUG] 받은 데이터: {data}")
            
            phone = data.get('phone', '').strip()
            card_number = data.get('card_number', '').strip()
            
            print(f"[DEBUG] 전화번호: {phone}")
            print(f"[DEBUG] 카드번호: {card_number}")
            
            if not phone or not card_number:
                print("[DEBUG] 필수 필드 누락")
                return JsonResponse({
                    'status': 'error',
                    'message': '전화번호와 카드번호를 모두 입력해주세요.'
                }, status=400)
            
            # 전화번호 형식 확인
            phone = re.sub(r'[^0-9]', '', phone)
            if not re.match(r'^\d{10,11}$', phone):
                print("[DEBUG] 잘못된 전화번호 형식")
                return JsonResponse({
                    'status': 'error',
                    'message': '올바른 전화번호 형식이 아닙니다.'
                }, status=400)
            
            # 카드번호 형식 확인
            card_number = re.sub(r'[^0-9]', '', card_number)
            if not re.match(r'^\d{16}$', card_number):
                print("[DEBUG] 잘못된 카드번호 형식")
                return JsonResponse({
                    'status': 'error',
                    'message': '올바른 카드번호 형식이 아닙니다.'
                }, status=400)
            
            # 카드 사용 가능 여부 먼저 확인
            card = StationCardMapping.objects.select_related('card').filter(
                station=request.user,
                card__number=card_number
            ).first()
            print(f"[DEBUG] 카드 확인: {card}")
            
            if not card:
                print("[DEBUG] 카드 없음")
                return JsonResponse({
                    'status': 'error',
                    'message': '등록되지 않은 카드번호입니다.'
                }, status=400)
            
            if not card.is_active:
                print("[DEBUG] 비활성화된 카드")
                return JsonResponse({
                    'status': 'error',
                    'message': '비활성화된 카드입니다.'
                }, status=400)
            
            if card.card.is_used:
                print("[DEBUG] 이미 사용 중인 카드")
                return JsonResponse({
                    'status': 'error',
                    'message': '이미 사용 중인 카드입니다.'
                }, status=400)
            
            try:
                print("[DEBUG] 트랜잭션 시작")
                with transaction.atomic():
                    # 기존 사용자 확인 (락 설정)
                    existing_user = CustomUser.objects.select_for_update().filter(username=phone).first()
                    print(f"[DEBUG] 기존 사용자 확인: {existing_user}")
                    
                    if existing_user:
                        # 현재 주유소와의 관계 확인 (락 설정)
                        relation = CustomerStationRelation.objects.select_for_update().filter(
                            customer=existing_user,
                            station=request.user
                        ).first()
                        print(f"[DEBUG] 주유소와의 관계 확인: {relation}")
                        
                        if relation:
                            print("[DEBUG] 이미 등록된 고객")
                            return JsonResponse({
                                'status': 'error',
                                'message': '이미 등록된 고객입니다.'
                            }, status=400)
                    
                    # 카드 상태 한 번 더 확인 (락 설정)
                    card = StationCardMapping.objects.select_for_update().select_related('card').get(id=card.id)
                    if card.card.is_used:
                        print("[DEBUG] 카드가 이미 사용 중으로 변경됨")
                        return JsonResponse({
                            'status': 'error',
                            'message': '카드가 이미 다른 고객에 의해 사용 중입니다.'
                        }, status=400)
                    
                    # 신규 사용자인 경우 생성 (비밀번호를 카드번호로 설정)
                    if not existing_user:
                        print("[DEBUG] 신규 사용자 생성")
                        existing_user = CustomUser.objects.create_user(
                            username=phone,
                            password=card_number  # 입력받은 카드번호를 비밀번호로 설정
                        )
                    
                    # 고객 프로필 생성 또는 업데이트 (락 설정)
                    print("[DEBUG] 고객 프로필 생성/업데이트")
                    profile, created = CustomerProfile.objects.select_for_update().get_or_create(
                        user=existing_user,
                        defaults={
                            'customer_phone': phone,
                            'membership_card': card_number  # 입력받은 카드번호 설정
                        }
                    )
                    
                    if not created:
                        print("[DEBUG] 기존 프로필 업데이트")
                        profile.customer_phone = phone
                        profile.membership_card = card_number  # 입력받은 카드번호로 업데이트
                        profile.save()
                    
                    # 주유소와 고객 관계 생성
                    print("[DEBUG] 주유소-고객 관계 생성")
                    CustomerStationRelation.objects.create(
                        customer=existing_user,
                        station=request.user
                    )
                    
                    # 카드 상태 업데이트
                    print("[DEBUG] 카드 상태 업데이트")
                    card.card.is_used = True
                    card.card.save()
                    
                    print("[DEBUG] 고객 등록 완료")
                    return JsonResponse({
                        'status': 'success',
                        'message': '고객이 성공적으로 등록되었습니다.'
                    })
                
            except Exception as e:
                print(f"[DEBUG] 데이터베이스 오류: {str(e)}")
                return JsonResponse({
                    'status': 'error',
                    'message': '고객 등록 중 오류가 발생했습니다.'
                }, status=500)
                
        except json.JSONDecodeError as e:
            print(f"[DEBUG] JSON 파싱 오류: {str(e)}")
            return JsonResponse({
                'status': 'error',
                'message': '잘못된 요청 형식입니다.'
            }, status=400)
        except Exception as e:
            print(f"[DEBUG] 예상치 못한 오류: {str(e)}")
            return JsonResponse({
                'status': 'error',
                'message': '서버 오류가 발생했습니다.'
            }, status=500)
    
    print("[DEBUG] 잘못된 요청 방식")
    return JsonResponse({
        'status': 'error',
        'message': '잘못된 요청 방식입니다.'
    }, status=405)

@login_required
def delete_customer(request):
    """고객 삭제"""
    if not request.user.is_station:
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            customer_id = data.get('customer_id')
            
            if not customer_id:
                return JsonResponse({
                    'status': 'error',
                    'message': '고객 ID는 필수입니다.'
                }, status=400)
            
            # 고객-주유소 관계 삭제
            relation = get_object_or_404(
                CustomerStationRelation,
                customer_id=customer_id,
                station=request.user
            )
            relation.delete()
            
            return JsonResponse({
                'status': 'success',
                'message': '고객이 성공적으로 삭제되었습니다.'
            })
            
        except Exception as e:
            logger.error(f"고객 삭제 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': f'고객 삭제 중 오류가 발생했습니다: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'status': 'error',
        'message': '잘못된 요청 메소드입니다.'
    }, status=405)

@login_required
def check_customer_exists(request):
    """전화번호로 고객 존재 여부 확인"""
    if not request.user.is_station:
        return JsonResponse({'status': 'error', 'message': '권한이 없습니다.'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            phone = data.get('phone', '').strip()
            
            if not phone:
                return JsonResponse({
                    'status': 'error',
                    'message': '전화번호를 입력해주세요.'
                }, status=400)
            
            # 전화번호 형식 확인 (숫자만 허용)
            phone = re.sub(r'[^0-9]', '', phone)
            if not re.match(r'^\d{10,11}$', phone):
                return JsonResponse({
                    'status': 'error',
                    'message': '올바른 전화번호 형식이 아닙니다.'
                }, status=400)
            
            # 기존 사용자 확인 (username으로 검색)
            existing_user = CustomUser.objects.filter(username=phone).first()
            
            if existing_user:
                # 고객 프로필 정보 가져오기
                try:
                    profile = existing_user.customer_profile
                    customer_phone = profile.customer_phone if profile else ''
                except CustomerProfile.DoesNotExist:
                    customer_phone = ''
                
                # 현재 주유소와의 관계 확인
                relation = CustomerStationRelation.objects.filter(
                    customer=existing_user,
                    station=request.user
                ).first()
                
                if relation:
                    return JsonResponse({
                        'status': 'error',
                        'message': '이미 등록된 고객입니다.',
                        'exists': True,
                        'registered': True,
                        'customer_info': {
                            'id': existing_user.username,  # username이 전화번호이므로 ID로 사용
                            'phone': customer_phone
                        }
                    })
                else:
                    # 다른 주유소에만 등록된 고객
                    return JsonResponse({
                        'status': 'success',
                        'message': '다른 주유소에 등록된 고객입니다. 이 주유소에도 등록하시겠습니까?',
                        'exists': True,
                        'registered': False,
                        'customer_info': {
                            'id': existing_user.username,
                            'phone': customer_phone
                        }
                    })
            else:
                return JsonResponse({
                    'status': 'success',
                    'message': '등록 가능한 전화번호입니다.',
                    'exists': False,
                    'registered': False
                })
                
        except json.JSONDecodeError:
            return JsonResponse({
                'status': 'error',
                'message': '잘못된 요청 형식입니다.'
            }, status=400)
        except Exception as e:
            logger.error(f"고객 조회 중 오류 발생: {str(e)}", exc_info=True)
            return JsonResponse({
                'status': 'error',
                'message': '고객 조회 중 오류가 발생했습니다.'
            }, status=500)
    
    return JsonResponse({
        'status': 'error',
        'message': '잘못된 요청 방식입니다.'
    }, status=405)

@require_http_methods(["POST"])
def register_card(request):
    """멤버십 카드 등록 뷰"""
    logger.info("\n=== 멤버십 카드 등록 시작 ===")
    logger.info(f"요청 사용자: {request.user.username}")
    
    try:
        # 요청 데이터 파싱
        data = json.loads(request.body)
        card_number = data.get('card_number')
        logger.debug(f"입력된 카드번호: {card_number}")
        
        # 입력값 검증
        if not card_number or len(card_number) != 16 or not card_number.isdigit():
            logger.warning(f"잘못된 카드번호 형식: {card_number}")
            return JsonResponse({
                'status': 'error',
                'message': '올바른 카드번호를 입력해주세요 (16자리 숫자)'
            })
        
        # 카드번호 중복 체크
        if PointCard.objects.filter(number=card_number).exists():
            logger.warning(f"중복된 카드번호: {card_number}")
            return JsonResponse({
                'status': 'error',
                'message': '이미 등록된 카드번호입니다'
            })
        
        # 새 카드 생성
        new_card = PointCard.objects.create(
            number=card_number,
            created_at=timezone.now()
        )
        logger.info(f"새 카드 등록 완료: {new_card.number}")
        
        # 주유소-카드 매핑 생성
        StationCardMapping.objects.create(
            station=request.user,
            card=new_card,
            registered_at=timezone.now(),
            is_active=True
        )
        logger.info(f"주유소-카드 매핑 생성 완료: {request.user.username} - {new_card.number}")
        
        logger.info("=== 멤버십 카드 등록 완료 ===\n")
        return JsonResponse({
            'status': 'success',
            'message': '멤버십 카드가 성공적으로 등록되었습니다'
        })
        
    except json.JSONDecodeError as e:
        logger.error(f"JSON 파싱 오류: {str(e)}")
        return JsonResponse({
            'status': 'error',
            'message': '잘못된 요청 형식입니다'
        })
    except Exception as e:
        logger.error(f"카드 등록 중 오류 발생: {str(e)}")
        logger.error(f"오류 위치: {e.__traceback__.tb_frame.f_code.co_filename}:{e.__traceback__.tb_lineno}")
        return JsonResponse({
            'status': 'error',
            'message': f'카드 등록 중 오류가 발생했습니다: {str(e)}'
        })
